name: Publish
on:
  pull_request:
    types: [closed]
    branches:
      - stable
      - develop
      - beta

env:
  NODE_VERSION: 20
  PYTHON_VERSION: 3.11

jobs:
  predeployed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: predeployed/setup.py
      - name: Install dependencies
        run: |
          yarn
          cd predeployed/
          pip install wheel
          pip install -e .[dev]
      - name: Compile and generate artifacts
        run: |
          yarn compile
          python predeployed/scripts/generate_artifacts.py
      - name: Calculate versions
        run: |
          export BRANCH=${GITHUB_REF##*/}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "Branch $BRANCH"
          export VERSION=$(bash ./scripts/calculate_version.sh)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          ( test $BRANCH = "stable" || test $BRANCH = "master" && export PRERELEASE=false ) || export PRERELEASE=true
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV
      - name: Build
        working-directory: ./predeployed
        run: |
          export PIP_VERSION=$(bash ./scripts/calculate_version.sh)
          echo "Pkg version $PIP_VERSION"
          VERSION=$PIP_VERSION bash ./scripts/build.sh
      - name: Publish to pip
        working-directory: ./predeployed
        env:
          PIP_USERNAME: ${{ secrets.PIP_USERNAME }}
          PIP_PASSWORD: ${{ secrets.PIP_PASSWORD }}
        run: |
          bash ./scripts/publish.sh
      - name: Generate ABI
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          pip install predeployed/dist/*.whl
          ./predeployed/scripts/generate_abi.py > data/config-controller-$VERSION-abi.json
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          prerelease: ${{ env.PRERELEASE }}
          artifacts: data/*.json
